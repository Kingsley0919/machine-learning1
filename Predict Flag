import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn.metrics import accuracy_score
from sklearn.tree import plot_tree


cols = ['name','landmass','zone', 'area', 'population', 'language','religion','bars','stripes','colours',
'red','green','blue','gold','white','black','orange','mainhue','circles',
'crosses','saltires','quarters','sunstars','crescent','triangle','icon','animate','text','topleft','botright']

df = pd.read_excel(r'C:\Users\User\Desktop\machine learing codacademy\flag.xlsx',names = cols)

var = [ 'red', 'green', 'blue','gold', 'white', 'black', 'orange', 'mainhue','bars','stripes', 'circles','crosses', 'saltires','quarters','sunstars','triangle','animate']

df = df[df["landmass"].isin([3,6])]

labels = (df['landmass'] == 3)*1

data = pd.get_dummies(df[var])

x_train,x_test,y_train,y_test = train_test_split(data,labels,random_state =42, test_size = .4)

model = DecisionTreeClassifier(max_depth =3,ccp_alpha=0.01)
model.fit(x_train,y_train)
y_pred = model.predict(x_test)
score = accuracy_score(y_test,y_pred)



#print(score)



depths = range(1, 21,1)
acc_depth = []
for depth in depths:
    model1 = DecisionTreeClassifier(max_depth=depth)
    model1.fit(x_train,y_train)
    acc_depth.append(model1.score(x_test,y_test))
    
#print(acc_depth)
#plt.plot(depths, acc_depth)
#print(np.max(acc_depth))
#print(np.argmax(acc_depth)+1)


acc_pruned = []
for alpha in np.arange(0,1,0.01):
    clf = DecisionTreeClassifier(random_state=42, ccp_alpha=alpha)
    clf.fit(x_train, y_train)
    score = clf.score(x_test, y_test)
    acc_pruned.append(score)


    
#plt.plot(np.arange(0,1,0.01), acc_pruned, marker='o', drawstyle="steps-post")
#plt.xlabel("CCP alpha")
#plt.ylabel("Accuracy")
#plt.title("Accuracy vs CCP alpha")
#plt.show()
#print(acc_pruned)

    
#or  

x_train,x_test,y_train,y_test = train_test_split(data,labels,random_state =42, test_size = .4)

depths = range(1, 21, 1)
ccp_alphas = np.arange(0, 1, 0.01)

best_depth = None
best_alpha = None
best_score = -1

for depth in depths:
    for alpha in ccp_alphas:
        clf = DecisionTreeClassifier(random_state=42, max_depth=depth, ccp_alpha=alpha)
        clf.fit(x_train, y_train)
        score = clf.score(x_test, y_test)
        
        if score > best_score:
            best_score = score
            best_depth = depth
            best_alpha = alpha

print("Best score:", best_score)
print("Best depth:", best_depth)
print("Best alpha:", best_alpha)


plt.figure(figsize=(20,10))
plot_tree(model, filled=True)
plt.show()
